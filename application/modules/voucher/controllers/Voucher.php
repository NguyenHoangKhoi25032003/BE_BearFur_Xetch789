<?phpif (!defined('BASEPATH')) {	exit('No direct script access allowed');}include_once APPPATH . '/modules/layout/controllers/Layout.php';class Voucher extends Layout {	private $_module_slug = 'voucher';	private $_allowed_field = array('status');	function __construct() {		parent::__construct();		$this->load->library('form_validation');		$this->_data['breadcrumbs_module_name'] = 'Mã giảm giá';		$this->_data['module_slug'] = $this->_module_slug;		$this->load->model('voucher/m_voucher', 'M_voucher');	}	function admin_ajax_change_field() {		if (!$this->input->is_ajax_request()) {			exit('No direct script access allowed');		}		$post = $this->input->post();		if (!empty($post)) {			$value = $this->input->post('value');			$id = $this->input->post('id');			$field = $this->input->post('field');			$massage_success = $this->input->post('massage_success');			$massage_warning = $this->input->post('massage_warning');			$data = array(				$field => $value,			);			if (!in_array($field, $this->_allowed_field)) {				$notify_type = 'danger';				$notify_content = 'Trường này không tồn tại!';			} else if ($this->M_voucher->update($id, $data)) {				if ($value == 1) {					$notify_type = 'success';					$notify_content = $massage_success;				} else {					$notify_type = 'warning';					$notify_content = $massage_warning;				}			} else {				$notify_type = 'danger';				$notify_content = 'Dữ liệu chưa lưu!';			}			$this->set_notify_admin($notify_type, $notify_content);			$this->load->view('layout/notify-ajax', NULL);		} else {			redirect(base_url());		}	}	public function gets_items_field($field = '', $number = 3) {		if ((trim($field) == '') || !in_array($field, $this->_allowed_field)) {			return null;		}		$args = $this->default_args();		$args[$field] = 1;		if ($number > 0) {			$rows = $this->M_voucher->gets($args, $number, 0);		} else {			$rows = $this->M_voucher->gets($args);		}		return $rows;	}	function default_args() {		$order_by = array(			'order' => 'ASC',			'end_date' => 'DESC',			'start_date' => 'DESC',			'coupon_code' => 'ASC',		);		$args = array();		$args['order_by'] = $order_by;		return $args;	}		function check_code_availablity() {        $post = $this->input->post();        $this->_message_success = 'true';        $this->_message_danger = 'false';        if (!empty($post)) {            if ($this->input->post('ajax') == '1') {                $coupon_code = $this->input->post('coupon_code');                $id = $this->input->post('id');                if ($this->M_voucher->check_code_availablity($coupon_code, $id)) {                    $this->_status = "success";                    $this->_message = $this->_message_success;                } else {                    $this->_status = "danger";                    $this->_message = $this->_message_danger;                }                $this->set_json_encode();                $this->load->view('layout/json_data', $this->_data);            } else {                $coupon_code = $this->input->post('coupon_code');                $id = $this->input->post('id');                if ($this->M_voucher->check_code_availablity($coupon_code, $id)) {                    return TRUE;                } else {                    return FALSE;                }            }        } else {            redirect(base_url());        }    }		public function remove_coupon_code_ajax(){		if (!$this->input->is_ajax_request()) {		   exit('No direct script access allowed');		}				if($this->session->has_userdata('data_coupon_code')){			$this->session->unset_userdata('data_coupon_code');		}				$html_cart_total = formatRice($this->cart->total()) . ' VND';		$message = array();		$message['status'] = 'success';		$message['content'] = array('html_cart_total' => $html_cart_total);		$message['message'] = 'Tải dữ liệu thành công!';		echo json_encode($message);		exit();	}		public function apply_coupon_code_ajax($coupon_code = ''){		if (!$this->input->is_ajax_request()) {		   exit('No direct script access allowed');		}		$message = array();		$message['status'] = 'error';		$message['content'] = null;		$message['message'] = 'Kiểm tra thông tin nhập';		$post = $this->input->post();        if (!empty($post)) {			$coupon_code = $this->input->post('coupon_code');			$args = array();			$args['coupon_code'] = $coupon_code;			$args['current_time'] = time();			$args['status'] = 1;						$row = $this->get_by($args);			if (is_array($row) && !empty($row)) {				$_coupon_code  = $row['coupon_code'];				$_coupon_discount = $row['discount'];				$data_coupon_code = array(					'coupon_code'  => $_coupon_code,					'discount'     => $_coupon_discount,				);				$this->session->set_userdata('data_coupon_code', $data_coupon_code);								$html_discount_coupon_text = '<p class="append-discount-coupon-code-text">Phiếu giảm giá: <strong class="price-transport">' . $_coupon_code . '</strong> <a id="checkout-remove-voucher" href="javascript:void(0)">Chỉnh sửa</a></p><p class="append-discount-text">Khuyến mãi</p>';				$html_discount_coupon_value = '<p class="append-discount-coupon-code-value">-' . formatRice($_coupon_discount) . ' VND</p><p class="append-discount-value">-' . formatRice($_coupon_discount) . ' VND</p>';				$html_cart_total = formatRice($this->cart->total() - $_coupon_discount) . ' VND';								$message['status'] = 'success';				$message['content'] = array('html_discount_coupon_text' => $html_discount_coupon_text, 'html_discount_coupon_value' => $html_discount_coupon_value, 'html_cart_total' => $html_cart_total);				$message['message'] = 'Tải dữ liệu thành công!';			} else {				$message['status'] = 'error';				$message['content'] = null;				$message['message'] = 'Có lỗi xảy ra! Vui lòng thực hiện lại!';			}		} else {			$message['status'] = 'error';			$message['content'] = null;			$message['message'] = 'Chưa nhập dữ liệu! Vui lòng kiểm tra lại!';		}		echo json_encode($message);		exit();	}		function validate_exist($args) {        $data = $this->get_by($args);        if (is_array($data) && !empty($data)) {            return TRUE;        }        return FALSE;    }	function counts($options = array()) {		$default_args = $this->default_args();		if (is_array($options) && !empty($options)) {			$args = array_merge($default_args, $options);		} else {			$args = $default_args;		}				return $this->M_voucher->counts($args);	}	function gets($options = array()) {		$default_args = $this->default_args();		if (is_array($options) && !empty($options)) {			$args = array_merge($default_args, $options);		} else {			$args = $default_args;		}		return $this->M_voucher->gets($args);	}		function get_by($options = array()) {		$default_args = $this->default_args();		if (is_array($options) && !empty($options)) {			$args = array_merge($default_args, $options);		} else {			$args = $default_args;		}		return $this->M_voucher->get_by($args);	}	function get($id) {		return $this->M_voucher->get($id);	}	function get_max_order() {		$order_by = array(			'order' => 'DESC',		);		$args = array();		$args['order_by'] = $order_by;		$perpage = 1;		$offset = 0;		$rows = $this->M_voucher->gets($args, $perpage, $offset);		$max_order = isset($rows[0]['order']) ? $rows[0]['order'] : 0;		return (int) $max_order;	}	function re_order() {		$args = $this->default_args();		$rows = $this->M_voucher->gets($args);		if (is_array($rows) && !empty($rows)) {			$i = 0;			foreach ($rows as $value) {				$i++;				$data = array(					'order' => $i,				);				$this->M_voucher->update($value['id'], $data);			}		}	}		function add($data = NULL) {        if (empty($data)) {            return 0;        }        return $this->M_voucher->add($data);    }    function update($id, $data) {        return $this->M_voucher->update($id, $data);    }    function delete($id) {        return $this->M_voucher->delete($id);    }		function ajax_generate_coupons() {        if (!$this->input->is_ajax_request()) {            exit('No direct script access allowed');        }        $message = array();        $message['status'] = 'warning';        $message['content'] = null;        $message['message'] = 'Kiểm tra thông tin';        $post = $this->input->post();        if (!empty($post)) {            $no_of_coupons = (int) $this->input->post('no_of_coupons');			$length = $this->input->post('length');			$prefix = $this->input->post('prefix');			$suffix = $this->input->post('suffix');			$numbers = $this->input->post('numbers') == 'false' ? false : true;					$letters = $this->input->post('letters') == 'false' ? false : true;			$symbols = $this->input->post('symbols') == 'false' ? false : true;			$random_register = $this->input->post('random_register') == 'false' ? false : true;			$mask = $this->input->post('mask') == '' ? false : $this->input->post('mask');						if(($no_of_coupons > 0) && ($numbers || $letters || $symbols)){				$options = array();				$options['length'] = $length;				$options['prefix'] = $prefix;				$options['suffix'] = $suffix;				$options['letters'] = $letters;				$options['numbers'] = $numbers;				$options['symbols'] = $symbols;				$options['mixed_case'] = $random_register;				$options['mask'] = $mask;								$coupons = coupon::generate_coupons($no_of_coupons, $options);                $message['status'] = 'success';                $message['content'] = implode(", ", $coupons);//implode("\n", $coupons);                $message['message'] = 'Tải dữ liệu thành công!';            } else {                $message['status'] = 'danger';                $message['content'] = null;                $message['message'] = 'Có lỗi xảy ra! Vui lòng kiểm tra lại!';            }        }        echo json_encode($message);        exit();    }	function admin_index() {		$this->_initialize_admin();		$this->redirect_admin();		$this->_plugins_css_admin[] = array(			'folder' => 'bootstrap3-dialog/css',			'name' => 'bootstrap-dialog',		);		$this->_plugins_script_admin[] = array(			'folder' => 'bootstrap3-dialog/js',			'name' => 'bootstrap-dialog',		);		$this->set_plugins_admin();		$this->_modules_script[] = array(			'folder' => 'voucher',			'name' => 'admin-items',		);		$this->set_modules();		$get = $this->input->get();		$this->_data['get'] = $get;		$args = $this->default_args();		if (isset($get['q']) && trim($get['q']) != '') {			$args['q'] = $get['q'];		}		$total = $this->counts($args);		$perpage = isset($get['per_page']) ? $get['per_page'] : $this->config->item('per_page');		$segment = 3;		$this->load->library('pagination');		$config['total_rows'] = $total;		$config['per_page'] = $perpage;		$config['full_tag_open'] = '<ul class="pagination no-margin pull-right">';		$config['full_tag_close'] = '</ul><!--pagination-->';		$config['first_link'] = '&laquo;';		$config['first_tag_open'] = '<li class="prev page">';		$config['first_tag_close'] = '</li>';		$config['last_link'] = '&raquo;';		$config['last_tag_open'] = '<li class="next page">';		$config['last_tag_close'] = '</li>';		$config['next_link'] = 'Trang trước &rarr;';		$config['next_tag_open'] = '<li class="next page">';		$config['next_tag_close'] = '</li>';		$config['prev_link'] = '&larr; Trang sau';		$config['prev_tag_open'] = '<li class="prev page">';		$config['prev_tag_close'] = '</li>';		$config['cur_tag_open'] = '<li class="active"><a href="">';		$config['cur_tag_close'] = '</a></li>';		$config['num_tag_open'] = '<li class="page">';		$config['num_tag_close'] = '</li>';		if (!empty($get)) {			$config['base_url'] = get_admin_url($this->_module_slug);			$config['suffix'] = '?' . http_build_query($get, '', "&");			$config['first_url'] = get_admin_url($this->_module_slug . '?' . http_build_query($get, '', "&"));			$config['uri_segment'] = $segment;		} else {			$config['base_url'] = get_admin_url($this->_module_slug);			$config['uri_segment'] = $segment;		}		$this->pagination->initialize($config);		$pagination = $this->pagination->create_links();		$offset = ($this->uri->segment($segment) == '') ? 0 : $this->uri->segment($segment);		$rows = $this->M_voucher->gets($args, $perpage, $offset);		$this->_data['rows'] = $rows;		$this->_data['pagination'] = $pagination;		$this->_data['title'] = 'Danh sách mã giảm giá - ' . $this->config->item('site_name');		$this->_data['main_content'] = 'voucher/admin/view_page_index';		$this->load->view('layout/admin/view_layout', $this->_data);	}	function admin_add() {		$data = array(			'author_id' => $this->_data['userid'],			'coupon_code' => $this->input->post('coupon_code'),			'coupon_description' => $this->input->post('coupon_description'),			'start_date' => get_start_date($this->input->post('start_date')),			'end_date' => get_end_date($this->input->post('end_date')),			'applies_to' => serialize($this->input->post('applies_to')),			'discount' => filter_var($this->input->post('discount'), FILTER_SANITIZE_NUMBER_INT),			'status' => $this->input->post('status') ? 1 : 0,			'order' => $this->get_max_order() + 1,			'created' => time(),			'modified' => 0,		);		return $this->M_voucher->add($data);	}	function admin_update($id) {		$data = array(			'coupon_code' => $this->input->post('coupon_code'),			'coupon_description' => $this->input->post('coupon_description'),			'start_date' => get_start_date($this->input->post('start_date')),			'end_date' => get_end_date($this->input->post('end_date')),			'applies_to' => serialize($this->input->post('applies_to')),			'discount' => filter_var($this->input->post('discount'), FILTER_SANITIZE_NUMBER_INT),			'status' => $this->input->post('status') ? 1 : 0,			'modified' => time(),		);		return $this->M_voucher->update($id, $data);	}	function admin_delete() {		$this->_initialize_admin();		$this->load->module('users');		$this->_message_success = 'Đã xóa mã giảm giá!';		$this->_message_warning = 'Mã giảm giá này không tồn tại!';		if ($this->users->validate_admin_logged_in() == TRUE) {			$id = $this->input->get('id');			if ($id != 0) {				$rows = modules::run('voucher/districts/gets', array('in_id' => $id));				if(is_array($rows) && !empty($rows)){					$notify_type = 'danger';					$notify_content = "Mã giảm giá này có quận/huyện không xóa được. Vui lòng kiểm tra lại!";				}else{					if ($this->M_voucher->delete($id)) {						//sap xep lai						$this->re_order();						$notify_type = 'success';						$notify_content = $this->_message_success;					} else {						$notify_type = 'danger';						$notify_content = $this->_message_danger;					}				}			} else {				$notify_type = 'warning';				$notify_content = $this->_message_warning;			}			$this->set_notify_admin($notify_type, $notify_content);			redirect(get_admin_url($this->_module_slug));		} else {			$notify_type = 'danger';			$notify_content = $this->_message_banned;			$this->set_notify_admin($notify_type, $notify_content);			redirect(get_admin_url($this->_module_slug));		}	}	function admin_main() {		$this->_initialize_admin();		$this->redirect_admin();		$post = $this->input->post();		if (!empty($post)) {			$action = $this->input->post('action');			if ($action == 'delete') {				$this->_message_success = 'Đã xóa các mã giảm giá được chọn!';				$this->_message_warning = 'Bạn chưa chọn mã giảm giá nào!';				$ids = $this->input->post('idcheck');				if (is_array($ids) && !empty($ids)) {					foreach ($ids as $id) {						$rows = modules::run('voucher/districts/gets', array('in_id' => $id));						if(is_array($rows) && !empty($rows)){							$notify_type = 'danger';							$notify_content = "Mã giảm giá này có quận/huyện không xóa được. Vui lòng kiểm tra lại!";						}else{							if ($this->M_voucher->delete($id)) {								$notify_type = 'success';								$notify_content = $this->_message_success;							} else {								$notify_type = 'danger';								$notify_content = $this->_message_danger;							}						}					}					//sap xep lai					$this->re_order();				} else {					$notify_type = 'warning';					$notify_content = $this->_message_warning;				}				$this->set_notify_admin($notify_type, $notify_content);				redirect(get_admin_url($this->_module_slug));			} elseif ($action == 'content') {				redirect(get_admin_url($this->_module_slug . '/content'));			} elseif ($action == 'update') {				$this->_message_success = 'Đã cập nhật các mã giảm giá!';				$this->_message_warning = 'Không có mã giảm giá nào để cập nhật!';				$ids = $this->input->post('ids');				$orders = $this->input->post('order');				$count = count($orders);				if (!empty($ids) && !empty($orders)) {					for ($i = 0; $i < $count; $i++) {						$data = array(							'order' => $orders[$i],						);						$id = $ids[$i];						if ($this->M_voucher->update($id, $data)) {							$notify_type = 'success';							$notify_content = $this->_message_success;							$this->output->clearCache();						} else {							$notify_type = 'danger';							$notify_content = $this->_message_danger;						}					}				} else {					$notify_type = 'warning';					$notify_content = $this->_message_warning;				}				$this->set_notify_admin($notify_type, $notify_content);				redirect(get_admin_url($this->_module_slug));			}		} else {			redirect(get_admin_url($this->_module_slug));		}	}	function admin_content() {		$this->_initialize_admin();		$this->redirect_admin();				$this->_plugins_script_admin[] = array(			'folder' => 'jquery-mask',			'name' => 'jquery.mask',		);		$this->_plugins_script_admin[] = array(			'folder' => 'jquery-validation',			'name' => 'jquery.validate',		);		$this->_plugins_script_admin[] = array(			'folder' => 'jquery-validation/localization',			'name' => 'messages_vi',		);				$this->_plugins_css_admin[] = array(            'folder' => 'bootstrap-datepicker/css',            'name' => 'bootstrap-datepicker'        );        $this->_plugins_css_admin[] = array(            'folder' => 'bootstrap-datepicker/css',            'name' => 'bootstrap-datepicker3'        );        $this->_plugins_script_admin[] = array(            'folder' => 'bootstrap-datepicker/js',            'name' => 'bootstrap-datepicker'        );        $this->_plugins_script_admin[] = array(            'folder' => 'bootstrap-datepicker/locales',            'name' => 'bootstrap-datepicker.vi.min'        );        $this->_plugins_script_admin[] = array(            'folder' => 'bootstrap-datepicker',            'name' => 'app.editinfo'        );		$this->_plugins_css_admin[] = array(			'folder' => 'chosen',			'name' => 'chosen',		);		$this->_plugins_script_admin[] = array(			'folder' => 'chosen',			'name' => 'chosen.jquery',		);		$this->_plugins_script_admin[] = array(			'folder' => 'chosen',			'name' => 'apps',		);		$this->set_plugins_admin();		$this->_modules_script[] = array(			'folder' => 'voucher',			'name' => 'admin-content-validate',		);		$this->set_modules();		$post = $this->input->post();		if (!empty($post)) {			$this->form_validation->set_error_delimiters('<span class="help-block">', '</span>');			$this->form_validation->set_rules('coupon_code', 'Mã giảm giá', 'trim|required');			if ($this->form_validation->run($this)) {				if ($this->input->post('id')) {//update					$err = FALSE;					$id = $this->input->post('id');					if (!$this->admin_update($id)) {						$err = TRUE;					}					if ($err === FALSE) {						$this->output->clearCache();						$notify_type = 'success';						$notify_content = 'Cập nhật mã giảm giá thành công!';						$this->set_notify_admin($notify_type, $notify_content);						redirect(get_admin_url($this->_module_slug));					} else {						$notify_type = 'danger';						$notify_content = 'Có lỗi xảy ra!';						$this->set_notify_admin($notify_type, $notify_content);					}				} else {//add					$err = FALSE;					$insert_id = $this->admin_add();					if ($insert_id == 0) {						$err = TRUE;					}					if ($err === FALSE) {						$this->output->clearCache();						$notify_type = 'success';						$notify_content = 'Mã giảm giá đã được thêm!';						$this->set_notify_admin($notify_type, $notify_content);						redirect(get_admin_url($this->_module_slug));					} else {						$notify_type = 'danger';						$notify_content = 'Có lỗi xảy ra!';						$this->set_notify_admin($notify_type, $notify_content);					}				}			}		}		$title = 'Thêm mã giảm giá - ' . $this->_data['breadcrumbs_module_name'] . ' - ' . $this->config->item('site_name');		$id = ($this->uri->segment(4) == '') ? 0 : $this->uri->segment(4);		if ($id != 0) {			$row = $this->get($id);			$this->_data['row'] = $row;			$title = 'Cập nhật mã giảm giá - ' . $this->_data['breadcrumbs_module_name'] . ' - ' . $this->config->item('site_name');		}		$this->_data['title'] = $title;		$this->_data['main_content'] = 'voucher/admin/view_page_content';		$this->load->view('layout/admin/view_layout', $this->_data);	}}/* End of file voucher.php *//* Location: ./application/modules/voucher/controllers/voucher.php */